Fn main(void)
   Fn crypto_kem_keypair(uint8_t *pk, uint8_t *sk)
      Fn indcpa_keypair(uint8_t pk[KYBER_INDCPA_PUBLICKEYBYTES], uint8_t sk[KYBER_INDCPA_SECRETKEYBYTES])
         Fn pack_pk(uint8_t r[KYBER_INDCPA_PUBLICKEYBYTES], polyvec *pk, const uint8_t seed[KYBER_SYMBYTES])
            Fn polyvec_tobytes(uint8_t r[KYBER_POLYVECBYTES], const polyvec *a)
               Fn poly_tobytes(uint8_t r[KYBER_POLYBYTES], const poly *a)
         Fn pack_sk(uint8_t r[KYBER_INDCPA_SECRETKEYBYTES], polyvec *sk)
            Fn polyvec_tobytes(uint8_t r[KYBER_POLYVECBYTES], const polyvec *a)
         Fn poly_getnoise_eta1(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t nonce)
            Fn poly_cbd_eta1(poly *r, const uint8_t buf[KYBER_ETA1*KYBER_N/4])
               Fn cbd2(poly *r, const uint8_t buf[2*KYBER_N/4])
                  Fn load32_littleendian(const uint8_t x[4])
               Fn cbd3(poly *r, const uint8_t buf[3*KYBER_N/4])
                  Fn load24_littleendian(const uint8_t x[3])
         Fn poly_tomont(poly *r)
            Fn montgomery_reduce(int32_t a)
         Fn polyvec_add(polyvec *r, const polyvec *a, const polyvec *b)
            Fn poly_add(poly *r, const poly *a, const poly *b)
         Fn polyvec_basemul_acc_montgomery(poly *r, const polyvec *a, const polyvec *b)
            Fn poly_add(poly *r, const poly *a, const poly *b)
            Fn poly_basemul_montgomery(poly *r, const poly *a, const poly *b)
               Fn basemul(int16_t r[2], const int16_t a[2], const int16_t b[2], int16_t zeta)
                  Fn fqmul(int16_t a, int16_t b)
                     Fn montgomery_reduce(int32_t a)
            Fn poly_reduce(poly *r)
               Fn barrett_reduce(int16_t a)
         Fn polyvec_ntt(polyvec *r)
            Fn poly_ntt(poly *r)
               Fn ntt(int16_t r[256])
                  Fn fqmul(int16_t a, int16_t b)
               Fn poly_reduce(poly *r)
         Fn polyvec_reduce(polyvec *r)
            Fn poly_reduce(poly *r)
         Fn randombytes(uint8_t *out, size_t outlen)
      Fn randombytes(uint8_t *out, size_t outlen)
   Fn kex_ake_initA(uint8_t *send, uint8_t *tk, uint8_t *sk, const uint8_t *pkb)
      Fn crypto_kem_enc(uint8_t *ct, uint8_t *ss, const uint8_t *pk)
         Fn indcpa_enc(uint8_t c[KYBER_INDCPA_BYTES], const uint8_t m[KYBER_INDCPA_MSGBYTES], const uint8_t pk[KYBER_INDCPA_PUBLICKEYBYTES], const uint8_t coins[KYBER_SYMBYTES])
            Fn pack_ciphertext(uint8_t r[KYBER_INDCPA_BYTES], polyvec *b, poly *v)
               Fn poly_compress(uint8_t r[KYBER_POLYCOMPRESSEDBYTES], const poly *a)
               Fn polyvec_compress(uint8_t r[KYBER_POLYVECCOMPRESSEDBYTES], const polyvec *a)
            Fn poly_add(poly *r, const poly *a, const poly *b)
            Fn poly_frommsg(poly *r, const uint8_t msg[KYBER_INDCPA_MSGBYTES])
               Fn cmov_int16(int16_t *r, int16_t v, uint16_t b)
            Fn poly_getnoise_eta1(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t nonce)
               Fn poly_cbd_eta1(poly *r, const uint8_t buf[KYBER_ETA1*KYBER_N/4])
                  Fn cbd2(poly *r, const uint8_t buf[2*KYBER_N/4])
                     Fn load32_littleendian(const uint8_t x[4])
                  Fn cbd3(poly *r, const uint8_t buf[3*KYBER_N/4])
                     Fn load24_littleendian(const uint8_t x[3])
            Fn poly_getnoise_eta2(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t nonce)
               Fn poly_cbd_eta2(poly *r, const uint8_t buf[KYBER_ETA2*KYBER_N/4])
                  Fn cbd2(poly *r, const uint8_t buf[2*KYBER_N/4])
            Fn poly_invntt_tomont(poly *r)
               Fn invntt(int16_t r[256])
                  Fn barrett_reduce(int16_t a)
                  Fn fqmul(int16_t a, int16_t b)
            Fn poly_reduce(poly *r)
            Fn polyvec_add(polyvec *r, const polyvec *a, const polyvec *b)
            Fn polyvec_basemul_acc_montgomery(poly *r, const polyvec *a, const polyvec *b)
            Fn polyvec_invntt_tomont(polyvec *r)
               Fn poly_invntt_tomont(poly *r)
            Fn polyvec_ntt(polyvec *r)
            Fn polyvec_reduce(polyvec *r)
            Fn unpack_pk(polyvec *pk, uint8_t seed[KYBER_SYMBYTES], const uint8_t packedpk[KYBER_INDCPA_PUBLICKEYBYTES])
               Fn polyvec_frombytes(polyvec *r, const uint8_t a[KYBER_POLYVECBYTES])
                  Fn poly_frombytes(poly *r, const uint8_t a[KYBER_POLYBYTES])
         Fn randombytes(uint8_t *out, size_t outlen)
      Fn crypto_kem_keypair(uint8_t *pk, uint8_t *sk)
   Fn kex_ake_sharedA(uint8_t *k, const uint8_t *recv, const uint8_t *tk, const uint8_t *sk, const uint8_t *ska)
      Fn crypto_kem_dec(uint8_t *ss, const uint8_t *ct, const uint8_t *sk)
         Fn cmov(uint8_t *r, const uint8_t *x, size_t len, uint8_t b)
         Fn indcpa_dec(uint8_t m[KYBER_INDCPA_MSGBYTES], const uint8_t c[KYBER_INDCPA_BYTES], const uint8_t sk[KYBER_INDCPA_SECRETKEYBYTES])
            Fn poly_invntt_tomont(poly *r)
            Fn poly_reduce(poly *r)
            Fn poly_sub(poly *r, const poly *a, const poly *b)
            Fn poly_tomsg(uint8_t msg[KYBER_INDCPA_MSGBYTES], const poly *a)
            Fn polyvec_basemul_acc_montgomery(poly *r, const polyvec *a, const polyvec *b)
            Fn polyvec_ntt(polyvec *r)
            Fn unpack_ciphertext(polyvec *b, poly *v, const uint8_t c[KYBER_INDCPA_BYTES])
               Fn poly_decompress(poly *r, const uint8_t a[KYBER_POLYCOMPRESSEDBYTES])
               Fn polyvec_decompress(polyvec *r, const uint8_t a[KYBER_POLYVECCOMPRESSEDBYTES])
            Fn unpack_sk(polyvec *sk, const uint8_t packedsk[KYBER_INDCPA_SECRETKEYBYTES])
               Fn polyvec_frombytes(polyvec *r, const uint8_t a[KYBER_POLYVECBYTES])
         Fn indcpa_enc(uint8_t c[KYBER_INDCPA_BYTES], const uint8_t m[KYBER_INDCPA_MSGBYTES], const uint8_t pk[KYBER_INDCPA_PUBLICKEYBYTES], const uint8_t coins[KYBER_SYMBYTES])
         Fn verify(const uint8_t *a, const uint8_t *b, size_t len)
   Fn kex_ake_sharedB(uint8_t *send, uint8_t *k, const uint8_t *recv, const uint8_t *skb, const uint8_t *pka)
      Fn crypto_kem_dec(uint8_t *ss, const uint8_t *ct, const uint8_t *sk)
      Fn crypto_kem_enc(uint8_t *ct, uint8_t *ss, const uint8_t *pk)
   Fn kex_uake_initA(uint8_t *send, uint8_t *tk, uint8_t *sk, const uint8_t *pkb)
      Fn crypto_kem_enc(uint8_t *ct, uint8_t *ss, const uint8_t *pk)
      Fn crypto_kem_keypair(uint8_t *pk, uint8_t *sk)
   Fn kex_uake_sharedA(uint8_t *k, const uint8_t *recv, const uint8_t *tk, const uint8_t *sk)
      Fn crypto_kem_dec(uint8_t *ss, const uint8_t *ct, const uint8_t *sk)
   Fn kex_uake_sharedB(uint8_t *send, uint8_t *k, const uint8_t *recv, const uint8_t *skb)
      Fn crypto_kem_dec(uint8_t *ss, const uint8_t *ct, const uint8_t *sk)
      Fn crypto_kem_enc(uint8_t *ct, uint8_t *ss, const uint8_t *pk)
   Fn printf(const char *__restrict __fmt, ...)
